.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH bos_create 8 "OpenAFS" "1/Mar/2006" "AFS Command Reference"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
bos create \- Defines a new process in the BosConfig file and starts it
.SH "SYNOPSIS"
\fBbos create\fR <<\ \fB\-server\fR\ <\fImachine\ name\fR >>>
    <<\ \fB\-instance\fR\ <\fIserver\ process\ name\fR >>> <<\ \fB\-type\fR\ <\fIserver\ type\fR >>>
    <<\ \fB\-cmd\fR\ <\fIcommand\ lines\fR+ >>> <<\ [\fB\-notifier\fR\ <\fInotifier\ program\fR] >>>
    <<\ [\fB\-cell\fR\ <\fIcell\ name\fR] >>> [\fB\-noauth\fR] [\fB\-localauth\fR] [\fB\-help\fR]
.PP
\fBbos c\fR <<\ \fB\-s\fR\ <\fImachine\ name\fR >>> <<\ \fB\-i\fR\ <\fIserver\ process\ name\fR >>>
    <<\ \fB\-t\fR\ <\fIserver\ type\fR >>> <<\ \fB\-cm\fR\ <\fIcommand\ lines\fR+ >>>
    <<\ [\fB\-not\fR\ <\fInotifier\ program\fR] >>> <<\ [\fB\-ce\fR\ <\fIcell\ name\fR] >>> [\fB\-noa\fR]
    [\fB\-l\fR] [\fB\-h\fR]
.SH "DESCRIPTION"
The \fBbos create\fR command creates a server process entry in the
\fI/usr/afs/local/BosConfig\fR file on the server machine named by the
\fB\-server\fR argument, sets the process's status to \f(CWRun\fR in the
\fIBosConfig\fR file and in memory, and starts the process.
.PP
A server process's entry in the \fIBosConfig\fR file defines its name, its
type, the command that initializes it, and optionally, the name of a
notifier program that runs when the process terminates.
.SH "OPTIONS"
.Ip "\fB\-server\fR <\fImachine name\fR>" 4
Indicates the server machine on which to define and start the new
process. Identify the machine by \s-1IP\s0 address or its host name (either
fully-qualified or abbreviated unambiguously). For details, see the \fIbos(8)\fR manpage.
.Ip "\fB\-instance\fR <\fIserver process name\fR>" 4
Names the process to define and start. Any name is acceptable, but for the
sake of simplicity it is best to use the last element of the process's
binary file pathname, and to use the same name on every server
machine. The conventional names, as used in all \s-1AFS\s0 documentation, are:
.Ip "buserver" 8
The Backup Server process.
.Ip "fs" 8
The process that combines the File Server, Volume Server, and Salvager
processes (\fBfileserver\fR, \fBvolserver\fR, and \fBsalvager\fR).
.Ip "kaserver" 8
The Authentication Server process.
.Ip "ptserver" 8
The Protection Server process.
.Ip "runntp" 8
The controller process for the Network Time Protocol Daemon.
.Ip "upclientbin" 8
The client portion of the Update Server process that retrieves binary
files from the \fI/usr/afs/bin\fR directory of the binary distribution
machine for this machine's \s-1CPU/\s0operating system type. (The name of the
binary is \fBupclient\fR, but the \f(CWbin\fR suffix distinguishes this process
from \f(CWupclientetc\fR.)
.Ip "upclientetc" 8
The client portion of the Update Server process that retrieves
configuration files from the \fI/usr/afs/etc\fR directory of the system
control machine. (The name of the binary is \fBupclient\fR, but the \f(CWetc\fR
suffix distinguishes this process from \f(CWupclientbin\fR.)
.Ip "upserver" 8
The server portion of the Update Server process.
.Ip "vlserver" 8
The Volume Location (\s-1VL\s0) Server process.
.Ip "\fB\-type\fR <\fIserver type\fR>" 4
Specifies the process's type. The acceptable values are:
.Ip "cron" 8
Use this value for cron-type processes that the \s-1BOS\s0 Server starts only at
a defined daily or weekly time, rather than whenever it detects that the
process has terminated. \s-1AFS\s0 does not define any such processes by default,
but makes this value available for administrator use. Define the time for
command execution as part of the \fB\-cmd\fR argument to the \fBbos create\fR
command.
.Ip "fs" 8
Use this value only for the fs process, which combines the File Server,
Volume Server and Salvager processes. If one of the component processes
terminates, the \s-1BOS\s0 Server shuts down and restarts the processes in the
appropriate order.
.Ip "simple" 8
Use this value for all processes listed as acceptable values to the
\fB\-instance\fR argument, except for the \fBfs\fR process.  There are no
interdependencies between simple processes, so the \s-1BOS\s0 Server can stop and
start them independently as necessary.
.Ip "\fB\-cmd\fR <\fIcommand lines\fR>+" 4
Specifies each command the \s-1BOS\s0 Server runs to start the process.  Specify
no more than six commands (which can include the command's options, in
which case the entire string is surrounded by double quotes); any
additional commands are ignored.
.Sp
For a simple process, provide the complete pathname of the process's
binary file on the local disk (for example, \fI/usr/afs/bin/ptserver\fR for
the Protection Server). If including any of the initialization command's
options, surround the entire command in double quotes (\f(CW""\fR). The
\fBupclient\fR process has a required argument, and the commands for all
other processes take optional arguments.
.Sp
For the fs process, provide the complete pathname of the local disk binary
file for each of the component processes: \fBfileserver\fR, \fBvolserver\fR, and
\fBsalvager\fR, in that order. The standard binary directory is
\fI/usr/afs/bin\fR.  If including any of an initialization command's options,
surround the entire command in double quotes (\f(CW""\fR).
.Sp
For a cron process, provide two parameters:
.Ip "\(bu" 8
The complete local disk pathname of either an executable file or a command
from one of the \s-1AFS\s0 suites (complete with all of the necessary
arguments). Surround this parameter with double quotes (\f(CW""\fR) if it
contains spaces.
.Ip "\(bu" 8
A specification of when the \s-1BOS\s0 Server executes the file or command
indicated by the first parameter. There are three acceptable values:
.Ip "\(bu" 12
The string \f(CWnow\fR, which directs the \s-1BOS\s0 Server to execute the file or
command immediately and only once. It is usually simpler to issue the
command directly or issue the \fBbos exec\fR command.
.Ip "\(bu" 12
A time of day. The \s-1BOS\s0 Server executes the file or command daily at the
indicated time. Separate the hours and minutes with a colon (\fIhh:\s-1MM\s0\fR),
and use either 24-hour format, or a value in the range from \f(CW1:00\fR
through \f(CW12:59\fR with the addition of \f(CWam\fR or \f(CWpm\fR. For example, both
\f(CW14:30\fR and \f(CW"2:30 pm"\fR indicate 2:30 in the afternoon. Surround this
parameter with double quotes (\f(CW""\fR) if it contains a space.
.Ip "\(bu" 12
A day of the week and time of day, separated by a space and surrounded
with double quotes (\f(CW""\fR). The \s-1BOS\s0 Server executes the file or command
weekly at the indicated day and time. For the day, provide either the
whole name or the first three letters, all in lowercase letters (\f(CWsunday\fR
or \f(CWsun\fR, \f(CWthursday\fR or \f(CWthu\fR, and so on). For the time, use the same
format as when specifying the time alone.
.Ip "\fB\-notifier\fR <\fInotifier program\fR>" 4
Specifies the complete pathname on the local disk of a program that the
\s-1BOS\s0 Server invokes when the process terminates. The \s-1AFS\s0 distribution does
not include any notifier programs, but this argument is available for
administrator use. See the \fI\s-1NOTES\s0\fR manpage.
.Ip "\fB\-cell\fR <\fIcell name\fR>" 4
Names the cell in which to run the command. Do not combine this argument
with the \fB\-localauth\fR flag. For more details, see the \fIbos(8)\fR manpage.
.Ip "\fB\-noauth\fR" 4
Assigns the unprivileged identity \f(CWanonymous\fR to the issuer. Do not
combine this flag with the \fB\-localauth\fR flag. For more details, see
the \fIbos(8)\fR manpage.
.Ip "\fB\-localauth\fR" 4
Constructs a server ticket using a key from the local
\fI/usr/afs/etc/KeyFile\fR file. The \fBbos\fR command interpreter presents the
ticket to the \s-1BOS\s0 Server during mutual authentication. Do not combine this
flag with the \fB\-cell\fR or \fB\-noauth\fR options. For more details, see
the \fIbos(8)\fR manpage.
.Ip "\fB\-help\fR" 4
Prints the online help for this command. All other valid options are
ignored.
.SH "EXAMPLES"
The following command defines and starts the simple process
\f(CWkaserver\fR on the machine \f(CWfs3.abc.com\fR:
.PP
.Vb 2
\&   % bos create -server fs3.abc.com -instance kaserver -type simple \e
\&                -cmd /usr/afs/bin/kaserver
.Ve
The following command defines and starts the simple process \f(CWupclientbin\fR
on the machine \f(CWfs4.abc.com\fR. It references \f(CWfs1.abc.com\fR as the source
for updates to binary files, checking for changes to the \fI/usr/afs/bin\fR
directory every 120 seconds.
.PP
.Vb 3
\&   % bos create -server fs4.abc.com -instance upclientbin -type simple \e
\&                -cmd "/usr/afs/bin/upclient fs1.abc.com -clear -t 120 \e
\&                /usr/afs/bin"
.Ve
The following command creates the fs process fs on the machine
\f(CWfs4.abc.com\fR. Type the command on a single line.
.PP
.Vb 3
\&   % bos create -server fs4.abc.com -instance fs -type fs \e
\&                -cmd /usr/afs/bin/fileserver /usr/afs/bin/volserver \e
\&                /usr/afs/bin/salvager
.Ve
The following command creates a cron process called \f(CWuserbackup\fR on the
machine \f(CWfs5.abc.com\fR, so that the BOS Server issues the indicated \fBvos
backupsys\fR command each day at 3:00 a.m. (the command creates a backup
version of every volume in the file system whose name begins with
\f(CWuser\fR). Note that the issuer provides the complete pathname to the
\fBvos\fR command, includes the \fB\-localauth\fR flag on it, and types the
entire \fBbos create\fR command on one line.
.PP
.Vb 2
\&   % bos create -server fs5.abc.com -instance userbackup -type cron  \e
\&       -cmd "/usr/afs/bin/vos backupsys -prefix user -localauth" 03:00
.Ve
.SH "PRIVILEGE REQUIRED"
The issuer must be listed in the \fI/usr/afs/etc/UserList\fR file on the
machine named by the \fB\-server\fR argument, or must be logged onto a server
machine as the local superuser \f(CWroot\fR if the \fB\-localauth\fR flag is
included.
.SH "NOTES"
If the \fB\-notifier\fR argument is included when this command is used to
define and start a process, the BOS Server invokes the indicated
\fInotifier program\fR when the process exits. The intended use of a notifier
program is to inform administrators when a process exits unexpectedly, but
it can be used to perform any appropriate actions.  The following
paragraphs describe the bnode and bnode_proc structures in which the
BOS Server records information about the exiting process.
.PP
The BOS Server constructs and sends on the standard output stream one
bnode and one bnode_proc structure for each exiting process associated
with the notifier program. It brackets each structure with appropriate
\f(CWBEGIN\fR and \f(CWEND\fR statements (\f(CWBEGIN bnode\fR and \f(CWEND bnode\fR, \f(CWBEGIN
bnode_proc\fR and \f(CWEND bnode_proc\fR), which immediately follow the preceding
newline character with no intervening spaces or other characters. If the
notifier program does not need information from a structure, it can scan
ahead in the input stream for the \f(CWEND\fR statement.
.PP
In general, each field in a structure is a string of ASCII text terminated
by the newline character. The format of the information within a structure
possibly varies slightly depending on the type of process associated with
the notifier program.
.PP
The C code for the bnode and bnode_proc structures follows. Note that the
structures sent by the BOS Server do not necessarily include all of the
fields described here, because some are used only for internal record
keeping. The notifier process must robustly handle the absence of expected
fields, as well as the presence of unexpected fields, on the standard
input stream.
.PP
For proper performance, the notifier program must continue processing the
input stream until it detects the end-of-file (EOF). The BOS Server closes
the standard input file descriptor to the notifier process when it has
completed delivery of the data, and it is the responsibility of the
notifier process to terminate properly.
.PP
struct bnode contents:
.PP
.Vb 21
\&   struct bnode {
\&      struct bnode *next;      /* next pointer in top-level's list */
\&      char *name;              /* instance name */
\&      long nextTimeout;        /* next time this guy should be awakened */
\&      long period;             /* period between calls */
\&      long rsTime;             /* time we started counting restarts */
\&      long rsCount;            /* count of restarts since rsTime */
\&      struct bnode_type *type; /* type object */
\&      struct bnode_ops *ops;   /* functions implementing bnode class */
\&      long procStartTime;      /* last time a process was started */
\&      long procStarts;         /* number of process starts */
\&      long lastAnyExit;        /* last time a process exited for any reason */
\&      long lastErrorExit;      /* last time a process exited unexpectedly */
\&      long errorCode;          /* last exit return code */
\&      long errorSignal;        /* last proc terminating signal */
\&      char *lastErrorName;     /* name of proc that failed last */
\&      short refCount;          /* reference count */
\&      short flags;             /* random flags */
\&      char goal;               /* 1=running or 0=not running */
\&      char fileGoal;           /* same, but to be stored in file */
\&};
.Ve
Format of struct bnode explosion:
.PP
.Vb 11
\&   printf("name: %s\en",tp->name);
\&   printf("rsTime: %ld\en", tp->rsTime);
\&   printf("rsCount: %ld\en", tp->rsCount);
\&   printf("procStartTime: %ld\en", tp->procStartTime);
\&   printf("procStarts: %ld\en", tp->procStarts);
\&   printf("lastAnyExit: %ld\en", tp->lastAnyExit);
\&   printf("lastErrorExit: %ld\en", tp->lastErrorExit);
\&   printf("errorCode: %ld\en", tp->errorCode);
\&   printf("errorSignal: %ld\en", tp->errorSignal);
\&   printf("lastErrorName: %s\en", tp->lastErrorName);
\&   printf("goal: %d\en", tp->goal);
.Ve
struct bnode_proc contents:
.PP
.Vb 10
\&   struct bnode_proc {
\&      struct bnode_proc *next; /* next guy in top-level's list */
\&      struct bnode *bnode;     /* bnode creating this process */
\&      char *comLine;           /* command line used to start this process */
\&      char *coreName;          /* optional core file component name */
\&      long pid;                /* pid if created */
\&      long lastExit;           /* last termination code */
\&      long lastSignal;         /* last signal that killed this guy */
\&      long flags;              /* flags giving process state */
\&};
.Ve
Format of struct bnode_proc explosion:
.PP
.Vb 5
\&   printf("comLine: %s\en", tp->comLine);
\&   printf("coreName: %s\en", tp->coreName);
\&   printf("pid: %ld\en", tp->pid);
\&   printf("lastExit: %ld\en", tp->lastExit);
\&   printf("lastSignal: %ld\en", tp->lastSignal);
.Ve
.SH "SEE ALSO"
the \fIBosConfig(5)\fR manpage,
the \fIKeyFile(5)\fR manpage,
the \fIUserList(5)\fR manpage,
the \fIbos(8)\fR manpage,
the \fIbuserver(8)\fR manpage,
the \fIfileserver(8)\fR manpage,
the \fIkaserver(8)\fR manpage,
the \fIptserver(8)\fR manpage,
the \fIsalvager(8)\fR manpage,
the \fIupclient(8)\fR manpage,
the \fIupserver(8)\fR manpage,
the \fIvlserver(8)\fR manpage,
the \fIvolserver(8)\fR manpage,
the \fIvos_backupsys(1)\fR manpage
.SH "COPYRIGHT"
IBM Corporation 2000. <http://www.ibm.com/> All Rights Reserved.
.PP
This documentation is covered by the IBM Public License Version 1.0.  It was
converted from HTML to POD by software written by Chas Williams and Russ
Allbery, based on work by Alf Wachsmann and Elizabeth Cassell.

.rn }` ''
.IX Title "bos_create 8"
.IX Name "bos create - Defines a new process in the BosConfig file and starts it"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "OPTIONS"

.IX Item "\fB\-server\fR <\fImachine name\fR>"

.IX Item "\fB\-instance\fR <\fIserver process name\fR>"

.IX Item "buserver"

.IX Item "fs"

.IX Item "kaserver"

.IX Item "ptserver"

.IX Item "runntp"

.IX Item "upclientbin"

.IX Item "upclientetc"

.IX Item "upserver"

.IX Item "vlserver"

.IX Item "\fB\-type\fR <\fIserver type\fR>"

.IX Item "cron"

.IX Item "fs"

.IX Item "simple"

.IX Item "\fB\-cmd\fR <\fIcommand lines\fR>+"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\fB\-notifier\fR <\fInotifier program\fR>"

.IX Item "\fB\-cell\fR <\fIcell name\fR>"

.IX Item "\fB\-noauth\fR"

.IX Item "\fB\-localauth\fR"

.IX Item "\fB\-help\fR"

.IX Header "EXAMPLES"

.IX Header "PRIVILEGE REQUIRED"

.IX Header "NOTES"

.IX Header "SEE ALSO"

.IX Header "COPYRIGHT"

