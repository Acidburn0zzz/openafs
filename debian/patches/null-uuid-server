Treat clients that provide an all-zero UUID as if they don't support
UUIDs at all.  Pulled from the upstream stable branch, will be in 1.4.5.

--- openafs.orig/src/viced/host.c
+++ openafs/src/viced/host.c
@@ -74,6 +74,7 @@
 extern int lwps;		/* the max number of server threads */
 extern afsUUID FS_HostUUID;
 
+afsUUID nulluuid;
 int CEs = 0;			/* active clients */
 int CEBlocks = 0;		/* number of blocks of CEs */
 struct client *CEFree = 0;	/* first free client */
@@ -1329,7 +1330,8 @@
 	rx_PutConnection(cb_conn);
 	cb_conn=NULL;
 	H_LOCK;
-	if (code == RXGEN_OPCODE) {
+	if ((code == RXGEN_OPCODE) ||
+	    (afs_uuid_equal(&interf.uuid, &nulluuid))) {
 	    identP = (struct Identity *)malloc(sizeof(struct Identity));
 	    if (!identP) {
 		ViceLog(0, ("Failed malloc in h_GetHost_r\n"));
@@ -1452,7 +1454,8 @@
 	    rx_PutConnection(cb_conn);
 	    cb_conn=NULL;
 	    H_LOCK;
-	    if (code == RXGEN_OPCODE) {
+	    if ((code == RXGEN_OPCODE) ||
+		afs_uuid_equal(&interf.uuid, &nulluuid)) {
 		if (!identP)
 		    identP =
 			(struct Identity *)malloc(sizeof(struct Identity));
@@ -1662,6 +1665,7 @@
 void
 h_InitHostPackage()
 {
+    memset(&nulluuid, 0, sizeof(afsUUID));
     afsconf_GetLocalCell(confDir, localcellname, PR_MAXNAMELEN);
     if (!local_realm[0]) {
 	if (afs_krb_get_lrealm(local_realm, 0) != 0 /*KSUCCESS*/) {
